<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Effective Modern C++ 第一章 类型推导]]></title>
    <url>%2F2019%2F07%2F21%2FEffective-Modern-C-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC%2F</url>
    <content type="text"><![CDATA[[TOC] Effective Modern C++ 第一章 类型推导条款1 理解模板型别推导123456template&lt;typename T&gt;void f(ParamType param);void f(T&amp;&amp; param)void f(T param)f(expr); 编译器推导函数参数时会推导两个型别： T型别 不仅依赖exr的型别，也以来ParamType的型别 ParamType型别 包含一些修饰词const或引用符号限定 情形1：ParamType是个指针或引用，但不是万能引用 引用型别的实参会被当成非引用型别来处理 情形2：ParamType是个万能引用 万能引用的声明型别写作T&amp;&amp; expr为左值，T和P都被推导为左值引用 expr为右值，引用情形1 情形3：ParamType 既非指针也非引用 按值传递，引用，const，volatile 都会被忽略 数组或者函数型别的实参会被退化成对应的指针，当模板是用引用传递实参后，T的类型会被推导成实际的数组型别。当数组被用作初始化引用时，不会退化为相应的指针 条款2 理解auto型别推导auto类型推导就是模板推导，除去一种情形以外 当变量用auto声明时，auto扮演模板中T这个角色；变量的型别饰词扮演ParamType角色 1const auto&amp; rx = x; //型别饰词为const auto&amp; auto推导大括号起始的初始化表达式代表一个std::initializer_list 函数返回值或lambda的形参中使用auto时使用模板类型推导而不是auto型别推导（即不能返回和传入大括号的初始化表达式） 条款3 理解decltype 绝大多数情况下，decltype会得出表达式的型别而不做任何修改 对于型别为T的左值表达式，除非仅有一个名字，decltype总是返回型别T&amp;。（表达式(x)为一个左值，decltype得出T&amp;） c++14支持decltype(auto)，它会从初始化表达式出发来进行推导型别，但是它的型别推导使用的是decltype规则 容器的operator[]的返回类型取决于该容器本身 条款4 掌握查看型别推导结果的方法 利用IDE编辑器，编译器错误消息和Boost.TypeIndex库常常能够查到推导而得的型别 有些工具不准确，所以理解c++型别推导规则是必要的。]]></content>
      <categories>
        <category>编程语言</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Effective Modern C++</tag>
      </tags>
  </entry>
</search>
